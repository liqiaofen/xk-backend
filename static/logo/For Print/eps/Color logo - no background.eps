%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 20.11.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 713
%%HiResBoundingBox: 0 0 2391.1199 712.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 712.07996 re
W
q
[0.24 0 0 -0.24 0 712.07996] cm
q
0 0 9962.5 2965.625 re
W*
q
[33.215485 0 0 33.224483 71.477623 -188.98991] cm
/DeviceRGB {} CS
[0.1333 0.1569 0.1922] SC
/DeviceRGB {} cs
[0.1333 0.1569 0.1922] sc
67.539001 22.815001 m
20.016001 22.815001 l
18.976002 22.815001 18.132 21.971001 18.132 20.93 c
18.132 19.889 18.976 19.045 20.016001 19.045 c
67.539001 19.045 l
68.579002 19.045 69.424004 19.889 69.424004 20.93 c
69.424004 21.972 68.579002 22.815001 67.539001 22.815001 c
h
f
38.493 34.585999 m
20.016001 34.585999 l
18.976002 34.585999 18.132 33.741997 18.132 32.701 c
18.132 31.659 18.976 30.815001 20.016001 30.815001 c
38.493 30.815001 l
39.535 30.815001 40.377998 31.659 40.377998 32.701 c
40.377998 33.742001 39.534 34.585999 38.493 34.585999 c
h
f
54.605 58.168999 m
20.014999 58.168999 l
18.974998 58.168999 18.130999 57.326 18.130999 56.284 c
18.130999 55.243999 18.974998 54.399002 20.014999 54.399002 c
54.605 54.399002 l
55.646999 54.399002 56.492001 55.244003 56.492001 56.284 c
56.492001 57.326 55.646999 58.168999 54.605 58.168999 c
h
f
83.117996 58.168999 m
63.502998 58.168999 l
62.462997 58.168999 61.618999 57.326 61.618999 56.284 c
61.618999 55.243999 62.463001 54.399002 63.502998 54.399002 c
83.117996 54.399002 l
84.158997 54.399002 85.002998 55.244003 85.002998 56.284 c
85.002998 57.326 84.158997 58.168999 83.117996 58.168999 c
h
f
82.700996 46.360001 m
20.016001 46.360001 l
18.976002 46.360001 18.132 45.515999 18.132 44.475002 c
18.132 43.433002 18.976 42.591003 20.016001 42.591003 c
82.702003 42.591003 l
83.743004 42.591003 84.588005 43.434002 84.588005 44.475002 c
84.586998 45.516998 83.741997 46.360001 82.700996 46.360001 c
h
f
12.909 27.367001 m
12.413 27.367001 11.918 27.173 11.548 26.785 c
7.193 22.233 l
6.499 21.507 6.496 20.362999 7.188 19.632999 c
11.485001 15.098 l
12.202001 14.342 13.395001 14.311 14.151001 15.027 c
14.905001 15.742999 14.939001 16.935999 14.223001 17.691999 c
11.159 20.924 l
14.274 24.177999 l
14.992001 24.931 14.965 26.124001 14.214 26.844 c
13.847 27.193001 13.378 27.367001 12.909 27.367001 c
h
f
12.909 74.438004 m
12.413 74.438004 11.918 74.245003 11.548 73.857002 c
7.193 69.305 l
6.499 68.576004 6.496 67.432999 7.188 66.703003 c
11.485001 62.172005 l
12.203001 61.417004 13.395001 61.385006 14.151001 62.101006 c
14.905001 62.818005 14.938001 64.008003 14.223001 64.764008 c
11.159 67.994011 l
14.274 71.248009 l
14.992001 72.002007 14.965 73.194008 14.214 73.91201 c
13.847 74.264 13.378 74.438004 12.909 74.438004 c
h
f
71.189003 86.221001 m
70.723 86.221001 70.256004 86.049004 69.892006 85.703003 c
69.136009 84.988007 69.105003 83.794006 69.821007 83.038002 c
72.88401 79.809006 l
69.771011 76.551003 l
69.050011 75.799004 69.078011 74.607002 69.831009 73.886002 c
70.583008 73.167 71.775009 73.194 72.49601 73.946999 c
76.850006 78.501999 l
77.544006 79.227997 77.546005 80.371002 76.856003 81.100998 c
72.557007 85.634995 l
72.186996 86.022003 71.688004 86.221001 71.189003 86.221001 c
h
f
88.704002 62.324001 m
88.237999 62.324001 87.772003 62.153 87.407005 61.807003 c
86.651009 61.091003 86.619003 59.898003 87.335007 59.142002 c
90.39801 55.910004 l
87.286011 52.657005 l
86.56601 51.905006 86.594009 50.712006 87.345009 49.991005 c
88.096008 49.273006 89.290009 49.298004 90.01001 50.051006 c
94.364014 54.602005 l
95.058014 55.327003 95.061012 56.471004 94.37001 57.201004 c
90.073013 61.735004 l
89.702003 62.127998 89.203003 62.324001 88.704002 62.324001 c
h
f
44.113998 69.901001 m
20.016001 69.901001 l
18.976002 69.901001 18.132 69.058998 18.132 68.015999 c
18.132 66.975998 18.976 66.131996 20.016001 66.131996 c
44.113998 66.131996 l
45.154999 66.131996 45.998997 66.975998 45.998997 68.015999 c
45.999001 69.059998 45.153999 69.901001 44.113998 69.901001 c
h
f
82.700996 69.894997 m
52.978001 69.894997 l
51.937 69.894997 51.093002 69.050995 51.093002 68.010994 c
51.093002 66.966995 51.937004 66.124992 52.978001 66.124992 c
82.701996 66.124992 l
83.742996 66.124992 84.587997 66.966995 84.587997 68.010994 c
84.586998 69.051003 83.741997 69.894997 82.700996 69.894997 c
h
f
65.816002 81.679001 m
20.016001 81.679001 l
18.976002 81.679001 18.132 80.834 18.132 79.792999 c
18.132 78.750999 18.976 77.906998 20.016001 77.906998 c
65.817001 77.906998 l
66.859001 77.906998 67.703003 78.750999 67.703003 79.792999 c
67.702003 80.834 66.858002 81.679001 65.816002 81.679001 c
h
f
Q
q
[20.59697 0 0 20.602551 3752.3525 878.05603] cm
/DeviceRGB {} CS
[0.1333 0.1569 0.1922] SC
/DeviceRGB {} cs
[0.1333 0.1569 0.1922] sc
15 11.44 m
19.0532 11.44 22.24 12.693299 24.560001 15.2 c
26.880003 17.706699 28.040001 21.16 28.040001 25.559999 c
28.040001 30.119999 26.873301 33.666801 24.540001 36.200001 c
22.206701 38.7332 19.080002 40 15.160001 40 c
2.760001 40 l
2.760001 11.440001 l
15.000001 11.440001 l
15 11.44 l
h
14.6 34.720001 m
16.866701 34.720001 18.626801 33.97332 19.880001 32.48 c
21.133202 30.986679 21.76 28.866699 21.76 26.119999 c
21.76 22.973299 21.086679 20.619999 19.74 19.059999 c
18.39332 17.5 16.32 16.719999 13.520001 16.719999 c
9.040001 16.719999 l
9.040001 34.720001 l
14.6 34.720001 l
h
38 11.44 m
38 16.119999 l
32.32 16.119999 l
32.32 11.439999 l
38 11.439999 l
38 11.44 l
h
38 19.32 m
38.000038 41.16 l
38.000038 42.653301 37.780037 43.826599 37.340038 44.68 c
36.90004 45.533401 36.180038 46.18 35.180038 46.619999 c
34.180038 47.059998 32.706738 47.279999 30.760038 47.279999 c
30.013359 47.279999 29.386639 47.226677 28.880039 47.119999 c
28.880039 42.439999 l
29.200039 42.54668 29.626719 42.599998 30.16004 42.599998 c
30.986719 42.599998 31.56004 42.433319 31.880039 42.099998 c
32.200039 41.766678 32.346718 41.306679 32.320038 40.719997 c
32.320038 19.319998 l
38.000038 19.319998 l
38 19.32 l
h
52.439999 18.76 m
58.466797 18.78668 61.48 20.746601 61.48 24.639999 c
61.48 35.599998 l
61.48 37.626698 61.720001 39.093399 62.200001 40 c
56.440002 40 l
56.226681 39.360001 56.093361 38.693298 56.040043 38 c
54.360043 39.706699 52.040043 40.560001 49.080044 40.560001 c
46.920044 40.560001 45.206745 40.013321 43.940044 38.920002 c
42.673344 37.826683 42.040043 36.306702 42.040043 34.360001 c
42.040043 32.466702 42.640041 31 43.840042 29.960001 c
45.066742 28.866701 47.293442 28.173401 50.520042 27.880001 c
52.813343 27.640001 54.266644 27.34 54.880043 26.980001 c
55.493443 26.620003 55.800041 26.066681 55.800041 25.320002 c
55.800041 24.386681 55.520042 23.693401 54.960041 23.240002 c
54.40004 22.786602 53.46674 22.560001 52.160042 22.560001 c
50.960041 22.560001 50.053341 22.806681 49.440041 23.300001 c
48.82674 23.793322 48.466721 24.586601 48.360039 25.68 c
42.680038 25.68 l
42.813358 23.4133 43.746639 21.6933 45.480038 20.52 c
47.213436 19.346701 49.533237 18.76 52.440037 18.76 c
52.439999 18.76 l
h
47.720001 34.119999 m
47.720001 35.879997 48.880001 36.759998 51.200001 36.759998 c
54.240002 36.733318 55.773201 35.173298 55.799999 32.079998 c
55.799999 29.879997 l
55.34668 30.333317 54.200001 30.666637 52.360001 30.879957 c
50.760002 31.066637 49.5867 31.393318 48.84 31.859997 c
48.0933 32.326675 47.720001 33.079998 47.720001 34.119995 c
47.720001 34.119999 l
h
77.760002 18.76 m
80.400002 18.76 82.313202 19.42676 83.5 20.760099 c
84.686798 22.093439 85.279999 24.2134 85.279999 27.1201 c
85.279999 40.000099 l
79.599998 40.000099 l
79.599998 28.280098 l
79.599998 26.573399 79.326675 25.306698 78.779999 24.480099 c
78.233322 23.6535 77.293297 23.240099 75.959999 23.240099 c
74.4133 23.240099 73.293297 23.706779 72.599998 24.640099 c
71.9067 25.573418 71.559998 27.106699 71.559998 29.240099 c
71.559998 40.000099 l
65.879997 40.000099 l
65.879997 19.320099 l
71.279999 19.320099 l
71.279999 22.2001 l
71.400002 22.2001 l
72.813301 19.906799 74.933304 18.760099 77.760002 18.760099 c
77.760002 18.76 l
h
97.839996 18.76 m
100.693298 18.76 102.746796 19.8666 104 22.08 c
104.080002 22.08 l
104.080002 19.32 l
109.480003 19.32 l
109.480003 38.720001 l
109.480003 41.706703 108.553322 43.973202 106.700005 45.52 c
104.846687 47.066799 102.213203 47.84 98.800003 47.84 c
96.186707 47.84 94.033203 47.213322 92.340004 45.959999 c
90.646805 44.706676 89.746704 43.119999 89.640007 41.199997 c
95.280006 41.199997 l
95.73333 43.093296 97.146606 44.039997 99.520004 44.039997 c
100.986702 44.039997 102.113403 43.606678 102.900002 42.739998 c
103.6866 41.873318 104.080002 40.639999 104.080002 39.039997 c
104.080002 36.199997 l
104 36.199997 l
103.440002 37.213295 102.620003 37.999996 101.540001 38.559998 c
100.459999 39.119999 99.213303 39.399998 97.800003 39.399998 c
95.026703 39.399998 92.860001 38.493317 91.300003 36.679996 c
89.740005 34.866676 88.960007 32.306797 88.960007 28.999996 c
88.960007 26.066696 89.780006 23.626797 91.420006 21.679996 c
93.060005 19.733196 95.200005 18.759996 97.840004 18.759996 c
97.839996 18.76 l
h
94.639999 28.92 m
94.639999 30.866699 95.046722 32.3866 95.860001 33.48 c
96.673279 34.573399 97.800003 35.119999 99.239998 35.119999 c
100.706696 35.119999 101.879997 34.593319 102.759995 33.540001 c
103.639992 32.486683 104.079994 31.093401 104.079994 29.360001 c
104.079994 27.280001 103.659996 25.706701 102.819992 24.640001 c
101.979988 23.573301 100.773293 23.040001 99.199989 23.040001 c
97.733292 23.040001 96.60659 23.593321 95.819992 24.700001 c
95.033394 25.806681 94.639992 27.213402 94.639992 28.92 c
94.639999 28.92 l
h
124.080002 18.76 m
127.386703 18.76 130 19.766701 131.919998 21.780001 c
133.839996 23.793301 134.800003 26.4268 134.800003 29.68 c
134.800003 32.959999 133.820007 35.593201 131.860001 37.580002 c
129.899994 39.566803 127.306801 40.560001 124.080002 40.560001 c
120.800003 40.560001 118.200005 39.553303 116.279999 37.540001 c
114.359993 35.526699 113.400002 32.906799 113.400002 29.68 c
113.400002 26.346701 114.380005 23.693199 116.340004 21.720001 c
118.300003 19.746803 120.880005 18.760002 124.080002 18.760002 c
124.080002 18.76 l
h
119.080002 29.68 m
119.080002 31.786701 119.506683 33.4133 120.360001 34.560001 c
121.213318 35.706703 122.4533 36.280003 124.080002 36.280003 c
125.760002 36.280003 127.020004 35.693321 127.860001 34.520004 c
128.699997 33.346687 129.119995 31.733404 129.119995 29.680004 c
129.119995 27.546703 128.686676 25.906704 127.819992 24.760004 c
126.953308 23.613304 125.693291 23.040005 124.039993 23.040005 c
122.439995 23.040005 121.213295 23.613325 120.359993 24.760004 c
119.506691 25.906683 119.079994 27.546703 119.079994 29.680004 c
119.080002 29.68 l
h
171.36 11.44 m
171.36 16.719999 l
162.800003 16.719999 l
162.800003 40 l
156.520004 40 l
156.520004 16.719999 l
147.960007 16.719999 l
147.960007 11.439999 l
171.36 11.439999 l
171.36 11.44 l
h
176.03999 19.32 m
176.03999 31.040001 l
176.03999 32.639999 176.29332 33.880001 176.79999 34.760002 c
177.30666 35.640003 178.26669 36.080002 179.67999 36.080002 c
181.2533 36.080002 182.37999 35.613323 183.06 34.68 c
183.74001 33.746677 184.08 32.253399 184.08 30.200001 c
184.08 19.32 l
189.75999 19.32 l
189.75999 40 l
184.36 40 l
184.36 37.119999 l
184.24001 37.119999 l
182.82671 39.4133 180.70671 40.559998 177.88 40.559998 c
175.18671 40.559998 173.26001 39.873318 172.10001 38.499996 c
170.94 37.126675 170.36 35.013397 170.36 32.159996 c
170.36 19.319996 l
176.03999 19.319996 l
176.03999 19.32 l
h
201.28 13.12 m
201.28004 19.32 l
205.44005 19.32 l
205.44005 23.119999 l
201.28004 23.119999 l
201.28004 33.360001 l
201.28004 34.32 201.44005 34.959999 201.76004 35.279999 c
202.08003 35.599998 202.72005 35.759998 203.68004 35.759998 c
204.37335 35.759998 204.96004 35.706676 205.44003 35.599998 c
205.44003 40.039997 l
204.64003 40.173317 203.52003 40.239998 202.08003 40.239998 c
199.89333 40.239998 198.26663 39.866676 197.20003 39.119999 c
196.13342 38.373322 195.60002 37.079998 195.60002 35.239998 c
195.60002 23.119999 l
192.16002 23.119999 l
192.16002 19.32 l
195.60002 19.32 l
195.60002 13.12 l
201.28001 13.12 l
201.28 13.12 l
h
218.2 18.76 m
221.5067 18.76 224.12 19.766701 226.03999 21.780001 c
227.95999 23.793301 228.92 26.4268 228.92 29.68 c
228.92 32.959999 227.94 35.593201 225.98 37.580002 c
224.01999 39.566803 221.42679 40.560001 218.2 40.560001 c
214.92 40.560001 212.31999 39.553303 210.39999 37.540001 c
208.48 35.526699 207.51999 32.906799 207.51999 29.68 c
207.51999 26.346701 208.49998 23.693199 210.45999 21.720001 c
212.42 19.746803 214.99998 18.760002 218.2 18.760002 c
218.2 18.76 l
h
213.2 29.68 m
213.2 31.786701 213.62668 33.4133 214.48 34.560001 c
215.33331 35.706703 216.5733 36.280003 218.2 36.280003 c
219.87999 36.280003 221.14 35.693321 221.98 34.520004 c
222.81999 33.346687 223.23999 31.733404 223.23999 29.680004 c
223.23999 27.546703 222.80667 25.906704 221.93999 24.760004 c
221.0733 23.613304 219.81329 23.040005 218.15999 23.040005 c
216.55998 23.040005 215.33328 23.613325 214.48 24.760004 c
213.62671 25.906683 213.2 27.546703 213.2 29.680004 c
213.2 29.68 l
h
244.67999 18.76 m
245.15999 18.76 245.57335 18.826681 245.92 18.960001 c
245.92 24.240002 l
245.30667 24.106682 244.62669 24.040001 243.88 24.040001 c
240.1467 24.040001 238.28 26.253302 238.28 30.68 c
238.28 40 l
232.60001 40 l
232.60001 19.32 l
238 19.32 l
238 23.16 l
238.08 23.16 l
238.64 21.8267 239.5267 20.76 240.74001 19.959999 c
241.95331 19.159998 243.2666 18.759998 244.68001 18.759998 c
244.67999 18.76 l
h
254 11.44 m
254 16.119999 l
248.32001 16.119999 l
248.32001 11.439999 l
254 11.439999 l
254 11.44 l
h
254 19.32 m
254 40 l
248.32001 40 l
248.32001 19.32 l
254 19.32 l
h
268 18.76 m
274.02679 18.78668 277.04001 20.746601 277.04001 24.639999 c
277.04001 35.599998 l
277.04001 37.626698 277.28 39.093399 277.76001 40 c
272 40 l
271.78668 39.360001 271.65335 38.693298 271.60004 38 c
269.92004 39.706699 267.60004 40.560001 264.64005 40.560001 c
262.48004 40.560001 260.76675 40.013321 259.50003 38.920002 c
258.23331 37.826683 257.60004 36.306702 257.60004 34.360001 c
257.60004 32.466702 258.20004 31 259.40002 29.960001 c
260.62674 28.866701 262.85342 28.173401 266.08002 27.880001 c
268.37332 27.640001 269.82663 27.34 270.44 26.980001 c
271.05338 26.620003 271.36002 26.066681 271.36002 25.320002 c
271.36002 24.386681 271.08002 23.693401 270.52002 23.240002 c
269.96002 22.786602 269.02673 22.560001 267.72003 22.560001 c
266.52002 22.560001 265.61334 22.806681 265.00003 23.300001 c
264.38672 23.793322 264.0267 24.586601 263.92004 25.68 c
258.24005 25.68 l
258.37338 23.4133 259.30664 21.6933 261.04004 20.52 c
262.77344 19.346701 265.09323 18.76 268.00003 18.76 c
268 18.76 l
h
263.28 34.119999 m
263.28 35.879997 264.44 36.759998 266.76001 36.759998 c
269.80002 36.733318 271.33322 35.173298 271.36002 32.079998 c
271.36002 29.879997 l
270.90671 30.333317 269.76001 30.666637 267.92001 30.879957 c
266.32001 31.066637 265.14673 31.393318 264.40002 31.859997 c
263.65332 32.326675 263.28003 33.079998 263.28003 34.119995 c
263.28 34.119999 l
h
287.28 11.44 m
287.28 40 l
281.60001 40 l
281.60001 11.440001 l
287.28 11.440001 l
287.28 11.44 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
